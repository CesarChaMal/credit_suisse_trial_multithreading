//noinspection JSUnresolvedVariable
/**
 * @file main.js
 *
 * Initializer for `require-js` and consequently the moduler parts of the
 * Javascript on the site.
 *
 */

 var QueryString = function () {
  // This function is anonymous, is executed immediately and
  // the return value is assigned to QueryString!
  var query_string = {};
  var query = window.location.search.substring(1);
  var vars = query.split("&");
  for (var i=0;i<vars.length;i++) {
    var pair = vars[i].split("=");
    	// If first entry with this name
    if (typeof query_string[pair[0]] === "undefined") {
      query_string[pair[0]] = pair[1];
    	// If second entry with this name
    } else if (typeof query_string[pair[0]] === "string") {
      var arr = [ query_string[pair[0]], pair[1] ];
      query_string[pair[0]] = arr;
    	// If third or later entry with this name
    } else {
      query_string[pair[0]].push(pair[1]);
    }
  }
    return query_string;
} ();

function getUrlParameter(sParam) {
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam)
        {
            return sParameterName[1];
        }
    }
    return null;
}

function displayQueryStringMessages(){

  msgId = getUrlParameter('msg');

  if( msgId !== '' && msgId != null){
    var msg = '';
    switch(msgId) {
        case '1':
        	  msg = "Successfully signed in";
              break;
        case '2':
            msg = "Registration was successful.";
            break;
        case '3':
            msg = "Your profile was updated.";
            break;
        case '4':
            msg = "Your password was changed.";
            break;
        case '5':
            msg = "Account added to your profile.";
            break;
        case '6':
            msg = "Your password was reset.";
            break;
        case '7':
            msg = "Password successfully updated.";
            break;
        case '8':
            msg = "Register or sign in for enterprise downloads";
            break;
        case '9':
            msg = "Complete your profile for enterprise downloads";
            break;
        case '99':
            msg = "An error occured.";
            break;
        default:
            msg = "";
    }
    if(history && history!=="undefined"){
    	history.replaceState({}, "title", top.location.href.substring(0, top.location.href.indexOf('?')));
    }
    var div = $('<div class="page-message">' + msg + '</div>').hide();
    $('main').children('div:first').prepend(div.fadeIn(300).delay(1500).fadeOut(700));
  }
}

function setCookie(cname, cvalue, exdays) {
	if( exdays === '' || msgId === null){
		exdays = 365;
	}
    var d = new Date();
    d.setTime(d.getTime() + (exdays*24*60*60*1000));
    var expires = "expires="+d.toUTCString();
    document.cookie = cname + "=" + encodeURIComponent(cvalue) + "; " + expires + "; path=/";
}

function getCookie(cname) {
    var name = cname + "=";
    var ca = document.cookie.split(';');
    for(var i=0; i<ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0)==' ') c = c.substring(1);
        if (c.indexOf(name) == 0) return c.substring(name.length,c.length);
    }
    return "";
}

// Create selector for javascript detection
$('body').addClass('js-on');

// Create selector for redesign detection
if($('.section').length){
  $('body').addClass('v2');
}

// Create selector for dev portal detection
if($('#global-header').hasClass('dev-portal')){
  $('body').addClass('dev-portal');
}

// Create selector for sso detection
if($('.sso-tpl').length){
  $('body').addClass('sso');
}

 // Function for adding events to
 var addEvent = function(elem, type, eventHandle) {
    if (elem == null || typeof(elem) == 'undefined') return;
    if ( elem.addEventListener ) {
        elem.addEventListener( type, eventHandle, false );
    } else if ( elem.attachEvent ) {
        elem.attachEvent( "on" + type, eventHandle );
    } else {
        elem["on"+type]=eventHandle;
    }
};

 // Function for removing events from
 var removeEvent = function(elem, type, eventHandle) {
    if (elem == null || typeof(elem) == 'undefined') return;
    if ( elem.removeEventListener ) {
        elem.removeEventListener( type, eventHandle, false );
    } else if ( elem.detatchEvent ) {
        elem.detatchEvent( "on" + type, eventHandle );
    }
};

 var staticHeaderBrowserWidth = 1087;
 var staticHeaderHeight = 0;

/* Returns height of elements */
function getElementHeight(selectorId){
	if (window.document.getElementById(selectorId) !== null){
		return document.getElementById(selectorId).offsetHeight;
	}
	return 0;
}

/* Returns height of fixed-position elements */
function getElementFixedHeight(selectorId){
	if (window.document.getElementById(selectorId) !== null){
		if ($('#'+selectorId).hasClass('fixed')){
			return document.getElementById(selectorId).offsetHeight;
		}
	}
	return 0;
}

function getElementResponsiveHeight(selectorId){
	if(window.innerWidth > staticHeaderBrowserWidth){
		return getElementHeight(selectorId);
	}
	return 0;
}

function getElementOffsetTop(selectorId){
	if (window.document.getElementById(selectorId) !== null){
		return document.getElementById(selectorId).offsetTop;
	}
	return 0;
}

function offsetContent(){
	var newHeight = getElementResponsiveHeight('global-header');
	document.getElementById('global-content').style.marginTop = newHeight + 'px';
}

//offsetContent();
//addEvent(window, "resize", offsetContent);


function resizeImages(){
	var newHeight = getElementHeight('global-header') + getElementHeight('main-promo');
	if (window.document.getElementById('main-promo') !== null){
		if(window.innerWidth > 800){
			document.getElementById('main-promo').style.backgroundSize = '100% ' + newHeight + 'px';
		}
	}
	/* debug */ //console.log(newHeight);
}

resizeImages();
addEvent(window, "resize", resizeImages);

function resizeIframe(iframe){
	//console.log($(iframe).parent().css('height'));
	$(iframe).css('height',$(iframe).parent().css('height')).addClass('border');
	addEvent(window, "resize", function(){$(iframe).css('height',$(iframe).parent().css('height')).addClass('border');});
}

function initializePageTemplate(){
	var pageTemplateSelector = 'page-template-attributes';
	if (window.document.getElementById(pageTemplateSelector) !== null){
		var el = $('<div id="' + $('#' + pageTemplateSelector).data('template-id') + '" class="' + $('#' + pageTemplateSelector).data('template-class') + '"></div>');
    if($('#' + pageTemplateSelector).data('template-class').indexOf('body-wrapper') > -1){
      //console.log('body');
      $('body').wrapInner(el);
    }
    else{
      //console.log('main');
      $('main').wrapInner(el);
    }
    $('main').wrapInner(el);
		$('#' + pageTemplateSelector).remove();
	}
}

var jumpNavId = 'jump-nav';
var jumpNavMarkerId = 'jump-nav-marker';
var $jumpNavs = $('.jump-nav');
var jumpNav = [];
var $jumpNavBanners = $('section.banner[data-jump-flag="true"]');

function initializeJumpNav(){

	/* Select banners that should have jump links. */
	if($jumpNavBanners.length){

		/* Loop through matching banners. */
		$jumpNavBanners.each(function(){

			var $jumpNav = $(this).parent().find('.jump-nav:first');

			/* Get all sections that should have jump links (Sections with H2s that aren't footer templates). */
			var $jumpNavSections = $(this).parents().eq(1).find('section:not(".banner, .tpl-footer") h2').closest('section');
			if($jumpNavSections.length){

				/* Loop through sections */
				$jumpNavSections.each(function(){
					var $header = $(this).find('h2:first');
					var headerText = $header.text();
					var headerId = headerText.toLowerCase().replace(/ /g,'-').replace(/['/"!.,?&#@^()]/g,'');
					headerId = headerId.replace(/\u00a0/g, '-');//For replacing &nbsp; before the version number
					$header.closest('section').attr('id',headerId);

					/* Append links to jump nav	*/
					$jumpNav.find('ul').append('<li class="col"><a id="'+headerId+'-link" href="#'+headerId+'" class="anchor"><span>'+headerText+'</span></a></li>');
				});
			}
		});
	}

	var jumpNavSelector = 'nav.' + jumpNavId;
	var $jumpNavsToMove = $jumpNavs.filter('.move-into-banner');

	var bannerSelector = '.banner';
	var jumpNavLinkSelector = '.' + jumpNavId + ' li a';
	var jumpNavHeight = getElementHeight(jumpNavId);

	// If the jump nav is supposed to be embedded into the banner, the jump nav will have a specified class.
	if ($jumpNavsToMove.length) {
		index = 0;
		$jumpNavsToMove.each(function(){
			var thisNavSelector = 'moved-nav-' + index;
			$(this).addClass(thisNavSelector);

			$banner = $(this).siblings(bannerSelector);
			if ($banner.length) {
				$banner.addClass('has-jump-nav').append($(this).siblings('.jump-nav-marker')).append($(this));

				// Set the jump-nav background image to match the banner.
				if ($banner.hasClass('bg-img')) {
					$("<style type='text/css'> .jump-nav."+thisNavSelector+".fixed{ background-image:" + $banner.css('background-image') + ";} </style>").appendTo("head");
				}
			}
			index += 1;
		});
	}

	$(jumpNavLinkSelector).each(function(){
		var linkHref = $(this).attr('href');

		/* Check to confirm jump link */
		if(linkHref.indexOf('#') == 0){
			var linkId = $(this).attr('id');
			if(document.getElementById(linkHref.replace('#',''))){
				//console.log('link:' + linkHref);
				var sectionHeight = getElementHeight(linkHref.replace('#',''));

				jumpNav.push({id:linkId, href:linkHref, top:($(linkHref).offset().top - jumpNavHeight), height:(sectionHeight)});
				//console.log('id:' + linkId +', href:' + linkHref + ', top:' + ($(linkHref).offset().top - jumpNavHeight) + ', height:' + sectionHeight);
			}
		}
	});
}
function refreshJumpNav(){

	var jumpNavSelector = 'nav.jump-nav';

	if ($(jumpNavSelector).length) {

		var scrollHeight = $(window).scrollTop();
		var jumpNavHeight = getElementHeight('jump-nav');

		/* Positioning */

		var jumpNavEl = document.getElementById(jumpNavId);
		var jumpNavMarker = document.getElementById(jumpNavMarkerId);
		// If scrollHeight is lower than jump nav, use a fixed position
		if((scrollHeight >= getElementOffsetTop(jumpNavId + '-marker') - staticHeaderHeight) && (scrollHeight < (jumpNav[jumpNav.length-1].top + jumpNav[jumpNav.length - 1].height)) ){
			jumpNavEl.classList.add('fixed', 'border');
			jumpNavEl.style.top = staticHeaderHeight + 'px';
			jumpNavMarker.style.height = jumpNavHeight + 'px';
	    }
	    else{
	    	// If not lower than jump nav
	    	jumpNavEl.classList.remove('fixed', 'border');
	    	jumpNavEl.style.top = '0px';
	    	jumpNavMarker.style.height = '0px';
	    }
		/* debug */ //console.log("scrollTop:" + $(window).scrollTop() + "#jump-nav-marker offset.top:" + $('#jump-nav-marker').offset().top + " | " + $('#jump-nav-marker').outerHeight() + ' | ' + jumpNav.offsetHeight);

		/* Link highlighting */

		if( (scrollHeight > jumpNav[0].top) && (scrollHeight < (jumpNav[jumpNav.length-1].top + jumpNav[jumpNav.length - 1].height)) ){
			//console.log('In range (' + scrollHeight +')');
			for(i=0;i < jumpNav.length;i++){
				if( (scrollHeight > jumpNav[i].top) & (scrollHeight < (jumpNav[i].top + jumpNav[i].height)) ){
					//console.log(jumpNav[i].id);
					$('.jump-nav a').removeClass('selected');
					$('.' + jumpNav[i].id).addClass('selected');
				}
			}
		}
		else{
			$('.jump-nav a').removeClass('selected');
			//console.log('Out of range (' + scrollHeight +')');
		}
	}
}

var pageNavId = 'page-nav';
var pageNavMarkerId = 'page-nav-marker';

function initializePageNav(){
	//console.log('initializePageNav()');
	pageNav = [];
	var pageNavSelector = 'div#' + pageNavId;
	var pageNavMoveSelector = pageNavSelector + '.move-into-banner';
	var bannerSelector = '.banner';
	var pageNavLinkSelector = 'div#' + pageNavId + ' li a';
	var dynamicPageNavLinkSelector = 'nav#' + pageNavId + ' li a';
	var pageNavHeight = getElementHeight(pageNavId);

	// If the page nav is supposed to be embedded into the banner, the page nav will have a specified class.
	if ($(pageNavMoveSelector).length) {
		if ($(bannerSelector).length) {
			$(bannerSelector).addClass('has-page-nav').append($(pageNavSelector + '-marker')).append($(pageNavSelector));

			// Set the page-nav background image to match the banner.
			if ($(bannerSelector).hasClass('bg-img')) {
				$("<style type='text/css'> #page-nav.fixed{ background-image:" + $(bannerSelector).css('background-image') + ";} </style>").appendTo("head");
			}
		}
	}

	$(pageNavLinkSelector).each(function(){
		var linkHref = $(this).attr('href');

		if(linkHref.indexOf('#') == 0){
			var linkId = $(this).attr('id');
			if(document.getElementById(linkHref.replace('#','')+ '-section')){
				//console.log('link:' + linkHref);
				var sectionHeight = getElementHeight(linkHref.replace('#','') + '-section');

				pageNav.push({id:linkId, href:linkHref, top:($(linkHref).offset().top - pageNavHeight), height:(sectionHeight)});
				//console.log('id:' + linkId +', href:' + linkHref + ', top:' + ($(linkHref).offset().top - pageNavHeight) + ', height:' + sectionHeight);
			}
		}
	});

	$(dynamicPageNavLinkSelector).each(function(){
		var linkHref = $(this).attr('href');

		/* Check to confirm jump link */
		if(linkHref.indexOf('#') == 0){
			var linkId = $(this).attr('id');
			if(document.getElementById(linkHref.replace('#',''))){
				//console.log('link:' + linkHref);
				var sectionHeight = getElementHeight(linkHref.replace('#',''));

				pageNav.push({id:linkId, href:linkHref, top:($(linkHref).offset().top - pageNavHeight), height:(sectionHeight)});
				//console.log('id:' + linkId +', href:' + linkHref + ', top:' + ($(linkHref).offset().top - pageNavHeight) + ', height:' + sectionHeight);
			}
		}
	});

}

function refreshPageNav(){

	var pageNavSelector = 'div#page-nav';

	if ($(pageNavSelector).length) {

		var scrollHeight = $(window).scrollTop();
		var pageNavHeight = getElementHeight('page-nav');

		/* Positioning */

		var pageNavEl = document.getElementById(pageNavId);
		var pageNavMarker = document.getElementById(pageNavMarkerId);
		// If scrollHeight is lower than page nav, use a fixed position
		if((scrollHeight >= getElementOffsetTop(pageNavId + '-marker') - staticHeaderHeight) && (scrollHeight < (pageNav[pageNav.length-1].top + pageNav[pageNav.length - 1].height)) ){
			pageNavEl.classList.add('fixed', 'border');
			pageNavEl.style.top = staticHeaderHeight + 'px';
			pageNavMarker.style.height = pageNavHeight + 'px';
	    }
	    else{
	    	// If not lower than page nav
	    	pageNavEl.classList.remove('fixed', 'border');
	    	pageNavEl.style.top = '0px';
	    	pageNavMarker.style.height = '0px';
	    }
		/* debug */ //console.log("scrollTop:" + $(window).scrollTop() + "#page-nav-marker offset.top:" + $('#page-nav-marker').offset().top + " | " + $('#page-nav-marker').outerHeight() + ' | ' + pageNav.offsetHeight);

		/* Link highlighting */

		if( (scrollHeight > pageNav[0].top) && (scrollHeight < (pageNav[pageNav.length-1].top + pageNav[pageNav.length - 1].height)) ){
			//console.log('In range (' + scrollHeight +')');
			for(i=0;i < pageNav.length;i++){
				if( (scrollHeight > pageNav[i].top) & (scrollHeight < (pageNav[i].top + pageNav[i].height)) ){
					//console.log(pageNav[i].id);
					if(!$('#' + pageNav[i].id).hasClass('selected')){
						$('#page-nav a').removeClass('selected');
						$('#' + pageNav[i].id).addClass('selected');
					}
				}
			}
		}
		else{
			$('#page-nav a').removeClass('selected');
			//console.log('Out of range (' + scrollHeight +')');
		}
	}
}

function initializeFilters(){
	if ($('.filters').length) {

		toggleCount = 10; // use all/fewer toggle when there are more than this many items

		$('.toggle').each(function(){

			/* Hide all/fewer toggles of fewer than the toggle number */
			if($(this).hasClass('see-fewer')){
				if($(this).siblings().length > (toggleCount + 2)){
					$(this).siblings(":nth-child(n+"+ (toggleCount + 1) +"):not('.toggle')").addClass('hide').hide();
				}
				else{
					$(this).siblings('.toggle').addClass('hide').hide();
				}
			}

			$(this).click(function() {

				/* Hide this toggle and show its sibling */
				$(this).hide().siblings('.toggle').removeClass('hide').show();

				/* Different behaviors for different toggle types */

					/* Show all siblings */
					if($(this).hasClass('see-all')){
						$(this).siblings(":not('.toggle')").removeClass('hide').show();
					}

					/* Hide all list items after the first set that should be shown */
					else if($(this).hasClass('see-fewer')){
						$(this).siblings(":nth-child(n+"+ (toggleCount + 1) +"):not('.toggle')").addClass('hide').hide();
					}

					/* Show child list */
					else if($(this).hasClass('expand')){
						$(this).siblings('ul').removeClass('hide').show();
					}

					/* Hide child list */
					else if($(this).hasClass('contract')){
						$(this).siblings('ul').addClass('hide').hide();
					}

  				return false;
			});
		});

	}
}


(function(context, require, isSandboxed) {
	"use strict";

	if (isSandboxed) {
		throw "Help! I'm stuck in a sandbox!";
	}

	var scriptTags = document.getElementsByTagName('script');
	var mainScriptSrc;
	var domainRelPathToMainJsDir;

	/** @type {HTMLScriptElement} tag */
	var tag;
	for (var i=0; i<scriptTags.length; i++) {

		tag = scriptTags[i];

	    if (tag.hasAttribute("rel") &&
	        tag.getAttribute("rel") === "main" &&
	        tag.hasAttribute("src")) {

	        mainScriptSrc = tag.getAttribute("src");
	    }
	}

	if (typeof mainScriptSrc !== 'string') {
	    throw "Can't find script rel=main!";
	}

	// Get everything that comes before "/main.js" in the 'src'
	// attribute which included this script
	var pathMatchResults = mainScriptSrc.match(/^(.*)\/.+$/);

	if (pathMatchResults.length === 2) {
	    domainRelPathToMainJsDir = pathMatchResults.pop();
	} else {
		throw "Couldn't determine domain-relative path to main JS!";
	}

	var config = {
		baseUrl: domainRelPathToMainJsDir,
		paths: {

			// the left side is the module ID,
			// the right side is the path to
			// the jQuery file, relative to baseUrl.
			// Also, the path should NOT include
			// the '.js' file extension. This example
			// is using jQuery 1.9.0 located at
			// js/lib/jquery-1.9.0.js, relative to
			// the HTML page.
			jquery: 'jquery-stub',
			application: 'application'
		}
	};

	/* debug*/ //console.log('require config: ', config);
	require.config(config);

	require(['application'], function(application) {
		console.log('on application; application = ', application);
		context.CbApp = application;
	});

})(
	// either the global context (window),
	// or empty object if run in isolation.
	this,
	// global requirejs function
	(typeof window == 'undefined')? require: window.requirejs,
	// only true in a script-local environment such as node.js
	// where there is no shared global object, e.g. `window`.
	(typeof exports !== 'undefined' && this.exports !== exports)
);


/*------------------------------------------------
 * JQuery Plugin: "EqualHeights"
 * Version: 2.0, 08.01.2008
 * by Scott Jehl, Todd Parker, Maggie Costello Wachs (http://www.filamentgroup.com)
 * Copyright (c) 2008 Filament Group. Licensed under GPL (http://www.opensource.org/licenses/gpl-license.php)
 *
 * Description: Sets the heights of the top-level children of an element to match the tallest child.
 * Modified: added .not('.no_height') to prevent no_height items from being modified
 * Modified: added .addClass('fixed_height') to children where height is set
------------------------------------------------*/

$.fn.equalHeights = function(px) {
	$(this).each(function(){

		//console.log('equalHeights');

		// MODIFICATION: CLEARING HEIGHTS FIRST
		if ($.browser.msie && $.browser.version == 6.0) {
			$(this).children().css({'height':''});
			$(this).children().children('.full_height').css({'height':''});
		}
		$(this).children().css({'height': ''});
		$(this).children().children('.full_height').css({'height':''});

		var currentTallest = 0;
		var currentTallestSub = 0;
		$(this).children().each(function(i){
			if ($(this).height() > currentTallest) { currentTallest = $(this).height();}
			if ($(this).children('.full_height').height() > currentTallestSub) { currentTallestSub = $(this).children('.full_height').height();}
		});

		// for ie6, set height since min-height isn't supported
		if ($.browser.msie && $.browser.version == 6.0) {
			$(this).children().not('.no_height').css({'height': currentTallest});
			$(this).children().not('.no_height').children('.full_height').css({'height': currentTallestSub});
		}

		// set height
		$(this).children().not('.no_height').css({'height': currentTallest});
		$(this).children().not('.no_height').children('.full_height').css({'height': currentTallestSub});

		// add CSS class
		$(this).children().not('.no_height').addClass('fixed_height');
		$(this).children().not('.no_height').children('.full_height').addClass('fixed_height');
	});

	return this;
};

function setEqualHeights(){
	//Calling .equalHeights() was throwing a error
	//$('.equal-heights').equalHeights();
}

function scrollTo(dest,speed){
	if(typeof speed === 'undefined'){ speed='fast'; }
	if(typeof dest !== 'undefined'){
		if($(dest).length){
			$('html,body').animate({ scrollTop: $(dest).offset().top }, speed);
			$(dest).focus();
		}
	}
}

function showContent(selectorToShow,selectorToHide,effect,speed,selectorToFocus,focusSet){
	if((typeof selectorToShow != 'undefined') && (typeof selectorToHide != 'undefined')){

		if(typeof effect === 'undefined')	{ effect='fade'; }
		if(typeof speed === 'undefined')	{ speed='fast'; }

		if($(selectorToShow).is(':hidden')){
			if(effect == 'slide'){
				if($(selectorToHide + ':visible').length){
					$(selectorToHide + ':visible').hide();
					$(selectorToShow).fadeIn(speed);
				}
				else{
					$(selectorToShow).slideDown(speed);
				}
			}
			else if(effect == 'show'){
				if($(selectorToHide + ':visible').length){
					$(selectorToHide + ':visible').hide();
				}
				$(selectorToShow).show();
			}
			// default effect is fade
			else{
				if($(selectorToHide + ':visible').length){
					$(selectorToHide + ':visible').fadeOut(speed, function(){
						$(selectorToShow).fadeIn(speed);
					});
				}
				else{
					$(selectorToShow).fadeIn(speed);
				}
			}
		}

	}

	if((typeof focusSet != 'undefined') && (typeof selectorToFocus != 'undefined')){
		$(focusSet).removeClass('selected');
		$(selectorToFocus).addClass('selected');
	}
}

function renderColumns(){
	/* debug */ console.group('createColumns');

	var j = 1;

	$('.js-cols').each(function() {
		var cols = $(this).data('columns');
		var direction = $(this).data('list-direction');

		var listSelector = ".col-list-" + j;
		var obj = jQuery(this);
		var totalListElements = jQuery(this).children('div').size();
		var rows = Math.ceil(totalListElements / cols);
		var listClass = $(this).attr('class');

		/* debug */ //console.log(cols + ' columns, ' + rows + ' rows,' + totalListElements + ' total elements, class = ' + listClass);

		/*
		Create List Elements given row number
		*/

		for (i=1;i<=rows;i++){
			if(i==1){
				$(this).removeClass(listClass).addClass('row row1').wrap('<div class="cols cols-'+cols+' '+listSelector.replace('.','')+'"></div>');
				$(this).parents(listSelector).addClass(listClass);
			} else{
				$(this).parents(listSelector).append('<div class="row row'+i+'"></div>');
			}
		}

		var index = 1;

		/*
		Append List Elements to the respective row  - Horizontal
		*/

		if(direction == 'horizontal'){

			$(this).children('div').each(function(){
				if(index > cols){
					var rowNumber = Math.ceil(index / cols);
					$(this).parents(listSelector).find('.row'+rowNumber).append(this);
				}
				index = index+1;
			});

			$(listSelector).find('div.row').each(function(){
				if($(this).children().size() == 0) {
				$(this).remove();
				}
			});
		}

		/*
		Append List Elements to the respective row  - Vertical
		*/

		else{
			$(this).children('div').each(function(){
				var rowNumber = rows - (index % rows);
				$(this).parents(listSelector).find('.row'+rowNumber).append(this);
				index = index+1;
			});
		}

		$(listSelector + ' .row').children('div').each(function(){
			$(this).addClass('col');
		});

	});

	/* debug */ console.groupEnd();
}

function initializeLearnMoreLinks(){
	console.log('initializeLearnMoreLinks...');
}

function formatColumns(){
	/* debug */ //console.group('createColumns');

	$('.table').each(function() {
		if($(this).attr('highlight-column')){
			var col = $(this).data('highlight-column');
			$('.table th:nth-child('+col+'), .table td:nth-child('+col+')').addClass('highlight');
		}
	});
}
var ctaId = 'persistent-ctas';
var ctaMarkerId = 'persistent-ctas-marker';

// Fade in CTA after user stops scrolling for 250 milliseconds
function showPersistentCTAs(){
    clearTimeout($.data(this, 'scrollTimer'));
    $.data(this, 'scrollTimer', setTimeout(function() {
        $('#' + ctaId).slideDown('');
		removeEvent(window, "scroll", showPersistentCTAs);
    }, 250));
}

function initializePersistentCTAs(){
	var footerSelector = 'global-footer';
	var persistentCtaHeight = getElementHeight(ctaId);
	var footerHeight = getElementHeight(footerSelector);
	var heightAboveFooter = $('#'+footerSelector).offset().top - persistentCtaHeight;
}
function refreshPersistentCTAs(){

	if ($('#' + ctaId).length) {

		var scrollHeight = $(window).scrollTop()  + $(window).height();
		var ctaHeight = getElementHeight(ctaId);

		/* Positioning */

		var ctaEl = document.getElementById(ctaId);
		var ctaMarker = document.getElementById(ctaMarkerId);
		// If scrollHeight is higher than persistent CTA marker, use a fixed position
		if(scrollHeight <= getElementOffsetTop(ctaId + '-marker')){
			ctaEl.classList.add('fixed');
			ctaMarker.style.height = ctaHeight + 'px';
	    }
	    else{
	    	// If not lower than page nav
	    	ctaEl.classList.remove('fixed');
	    	ctaMarker.style.height = '0px';
	    }
	}
}

var $articleNav = $('.section-nav');
var $articleNavContainer = $articleNav.children().first();

function resizeSectionNav(){
  if ($(window).width() >= 800) {
	   $articleNavContainer.css('width', '100%');
  }
}
function positionSectionNav(){
	var navPosition = $articleNav.offset();
	var windowBottom = $(window).scrollTop() + $(window).height()
	var navPositionBottom = navPosition.top + $articleNav.height();

	if(($(window).scrollTop() > navPosition.top) && (windowBottom < navPositionBottom)){
		$articleNavContainer.addClass('fixed').removeClass('fixedToBottom');
	}
	else if (windowBottom >= navPositionBottom){
		$articleNavContainer.addClass('fixedToBottom').removeClass('fixed');
	}
	else {
			$articleNavContainer.removeClass('fixed fixedToBottom');
	}
}


// document ready
$(function(){

	initializePageTemplate();

	if (window.document.getElementById(ctaId) !== null){
		initializePersistentCTAs();
		addEvent(window, "scroll", refreshPersistentCTAs);
	}

	renderColumns();
	formatColumns();

	setEqualHeights();

	$(window).resize(function() {
		setEqualHeights();
	});

  displayQueryStringMessages();

	/* Embed a section into the previous section if flagged. */
	var $sectionsToAbsorb = $('section.move-into-last-section');
	if($sectionsToAbsorb.length){

		/* Loop through matching elements. */
		$sectionsToAbsorb.each(function(){
			var $previousSection = $(this).prev();
			$(this).appendTo($previousSection);
		});
	}

	/* Assign a selector to every other section. */
	$('section:not(.banner)').filter(':odd').addClass('alt-section');

	$('.static-height').each(function( index ) {
		$(this).css('height',$(this).css('height'));
	});

	/* Add line numbers to Prism code highlighting */
	$('pre code').parent('[class*="language-"]').addClass('line-numbers');

	/* using fade instead of slide animation due to Firefox 3d-transform bug */
	$('.wire-carousel').slick({
		dots: true,
		infinite: true,
		speed: 300,
		slidesToShow: 1,
		draggable:false,
		fade: true,
		swipe:false,
		touchMove:false,
		adaptiveHeight: true,
		onInit:function(){$('.slick-cloned').attr('tabindex','-1');}
	});

	/* using fade instead of slide animation due to Firefox 3d-transform bug */
	$('div.section .carousel').slick({
		dots: true,
		infinite: true,
		speed: 300,
		slidesToShow: 1,
		draggable:true,
		fade: true,
		swipe:true,
		touchMove:true,
		onInit:function(){$('.slick-cloned').attr('tabindex','-1');}
	});

  if($('section#hp-banner .carousel .carousel_slide').length > 1){

    var homepageCarouselDisplayLength = 8000;

    // After slide change
    $('section#hp-banner .carousel').on('init', function(event, slick, currentSlide, nextSlide){
      $('.slick-cloned').attr('tabindex','-1');
      $('section#hp-banner .carousel_load-bar_meter').stop(true, true).animate({
          width: "100%",
        },
        homepageCarouselDisplayLength,
        function(){
          $('section#hp-banner .carousel_load-bar_meter').css('width','0px');
        }
      );
    });

    /* using fade instead of slide animation due to Firefox 3d-transform bug */
  	$('section#hp-banner .carousel').slick({
      arrows: false,
      //autoplay: true,
      autoplaySpeed: homepageCarouselDisplayLength,
  		dots: true,
  		infinite: true,
  		speed: 300,
  		slidesToShow: 1,
  		draggable:true,
  		fade: true,
  		swipe: true,
  		touchMove: true
  	});
    // After slide change
    $('section#hp-banner .carousel').on('afterChange', function(event, slick, currentSlide, nextSlide){
      $('section#hp-banner .carousel').slick('slickPlay');
      $('section#hp-banner .carousel_load-bar_meter').stop(true, true).animate({
          width: "100%",
        },
        homepageCarouselDisplayLength,
        function(){
          $('section#hp-banner .carousel_load-bar_meter').css('width','0px');
        }
      );
    });

  }

	initializeFilters();

	if ($('#features-section h2 a').length) {
		initializeLearnMoreLinks();
	}

	if (getUrlParameter('preview-content') != null) {
		console.log('Preview content mode on. Content hidden from the rest of the world will be shown.');
			$('.preview-content').removeClass('preview-content');
	}

	if (window.document.getElementsByClassName(pageNavId) !== null){
		initializePageNav();
		addEvent(window, "scroll", refreshPageNav);
	}
  /* Select banners that should have jump links. */
  if($jumpNavBanners.length){
		initializeJumpNav();
		addEvent(window, "scroll", refreshJumpNav);
	}

	/* Handle persistent CTA display on initial scroll */
	if ($('#persistent-ctas').length){
		addEvent(window, "scroll", showPersistentCTAs);
	}

}); // end onload


$(window).load(function() {

	/* Handle article navigation resizing or scroll */
	if ($articleNav.length){

		resizeSectionNav();
		addEvent(window, "resize", resizeSectionNav);

		//positionSectionNav();
		//addEvent(window, "resize", positionSectionNav);
		//addEvent(window, "scroll", positionSectionNav);
	}

	// Scroll locally to anchors. Links with "instructions" and "donwload" classes are not being used as scrollable anchors.
	$("a[href^=#]").not('.instructions, .download').click(function(e) {
		var dest = $(this).attr('href');
		if(dest != "#"){
			e.preventDefault();
			var offsetHeight = -2 /*section border height*/ + /*getElementResponsiveHeight('global-header') +*/ getElementHeight('page-nav') + getElementHeight('jump-nav');

			/*
			 * If the page-nav isn't fixed when the anchor is clicked, double the offset.
			 * This accounts for the lost height caused when the page-nav is taken out of the normal page flow.
			 */
			$('html,body').animate({ scrollTop: $(dest).offset().top - offsetHeight }, 1000);
			$(dest).focus();
		}
	});


	(function positionHash(){
		if(window.location.hash !== ''){
			var selectorId = window.location.hash.slice(1);
			if(document.getElementById(selectorId)){
				console.log('URL hash detected: ' + selectorId + '. Matching element found.');
				scrollPosition = $('#'+selectorId).offset().top - getElementResponsiveHeight('global-header') - getElementResponsiveHeight('page-nav') - getElementResponsiveHeight('jump-nav');
				$("html,body").animate({ scrollTop: scrollPosition }, "fast");
			//	alert($('#'+selectorId).offset().top - getElementResponsiveHeight('global-header') - getElementResponsiveHeight('page-nav'));
			}
		}
	}());


	/* Download page - Hide Show all platforms link of product does not detect OS */

	if(window.location.pathname.indexOf('/nosql-databases/downloads') > -1){
		$('.product[data-os-detection="false"] .version').each(function( index ) {
			$(this).find('.show-all-platforms').remove();
		});
	}

	/* Marketo Download Form Modal - close it on esc keypress */
	$(document).keyup(function(e) {
		// escape key maps to keycode `27`
		if (e.keyCode == 27) {
			// Hide form and shadowbox
			if ($('#shadowbox').length && $('#shadowbox').is(':visible')){
				$('#shadowbox').fadeOut();
			}
    	}
  	});

});



/*=======================================
 *=========================================
 * LEARN AND SUPPORT
 */

/*=======================================
 * Guides and References page-specific jump links
 */

function initializeDocListJumpNav(){

	/* Get all sections that should have jump links. */
	var $jumpLinkSections = $('section.documents');

	if($jumpLinkSections.length){
		/* Loop through sections. */
		$jumpLinkSections.each(function(){
			var $jumpNav = $(this).find('ul.anchors');
			var $jumpHeaders = $(this).find('h3');

			$jumpHeaders.each(function(){
				var $header = $(this).find('a');
				var headerText = $header.text();
				var headerId = headerText.toLowerCase().replace(/ /g,'-').replace(/['/"!.,?&#@^()]/g,'');
				$header.attr('id', headerId + '-anchor');

				/* Append links to jump nav	*/
				$jumpNav.append('<li><a id="'+headerId+'-link" href="#'+headerId+'-anchor" class="anchor">'+headerText+'</a></li>');
			});

		});
	}
}

$(function(){


	//setCookie('TESTCOOKIE', 'asdf');

	/*=======================================
	 * Ingested article tabbed content
	 */

	/* Add and remove classes for visual formatting. */

	$('pre code').removeClass('pre codeblock').parent().addClass('pre codeblock');
	$('.stripe-display pre:not([class*="language-"])').addClass('language-pre');
	$('.stripe-display pre:not([class*="language-"]) code').addClass('language-pre');

	/* Add classes for visual formatting. */
	var codeLanguage = getCookie('codeLanguage');
	setLanguage(codeLanguage);

	/* Guides and References page-specific jump links */
	initializeDocListJumpNav();

});

/*
 * ======================================= Show/hide tabs function.
 */
function setLanguage(codeLanguage) {
	var lang, cook;
	if (codeLanguage !== '') {

		/* Set language cookie. */
		setCookie('codeLanguage', codeLanguage);

		/* Tab display */
		$('.stripe-active.' + codeLanguage).addClass('selected');
		$('.stripe-active:not(.' + codeLanguage + ')').removeClass('selected');

		/* Content display */
		$('.stripe-display.' + codeLanguage).show();
		$('.stripe-display:not(.' + codeLanguage + ')').hide();

	} else {

		/**
		 * @ This will set cookie as default
		 */
		lang = $('.tab-bar a:first-child').eq(0).text();
		cook = lang.toLowerCase().replace(/[^a-z0-9-\s]/gi, '');
		setCookie('codeLanguage', cook);
		tabDisplay(cook);
	}
	/**
	 * @ Takes param of String which is added as the target element's classname.
	 */
	function tabDisplay(codeLanguage) {
		/* Tab display */
		if($('.stripe-active').length) {
			$('.stripe-active.' + codeLanguage).addClass('selected');
			$('.stripe-active:not(.' + codeLanguage + ')').removeClass('selected');

			/* Content display */
			$('.stripe-display.' + codeLanguage).show();
			$('.stripe-display:not(.' + codeLanguage + ')').hide();
		}
	}
}




if (document.location.hostname.indexOf('couchbase') > -1) {
	/*------------------------------------------------
	 * Flashtalking Couchbase oneTag.
	 * One Tag Conditional Container: Couchbase (6792) | Couchbase oneTag (5045)
	------------------------------------------------
	var ft_onetag_5045 = {
		ft_vars:{
			"ftXRef":"",
			"ftXValue":"",
			"ftXType":"",
			"ftXName":"",
			"ftXNumItems":"",
			"ftXCurrency":"",
			"U1":"",
			"U2":"",
			"U3":"",
			"U4":"",
			"U5":"",
			"U6":"",
			"U7":"",
			"U8":"",
			"U9":"",
			"U10":"",
			"U11":"",
			"U12":"",
			"U13":"",
			"U14":"",
			"U15":"",
			"U16":"",
			"U17":"",
			"U18":"",
			"U19":"",
			"U20":""
			},
		ot_dom:document.location.protocol+'//servedby.flashtalking.com',
		ot_path:'/container/6792;44410;5045;iframe/?',
		ot_href:'ft_referrer='+escape(document.location.href),
		ot_rand:Math.random()*1000000,
		ot_ref:document.referrer,
		ot_init:function(){
			var o=this,qs='',count=0,ns='';
			for(var key in o.ft_vars){
				qs+=(o.ft_vars[key]==''?'':key+'='+o.ft_vars[key]+'&');
			}
			count=o.ot_path.length+qs.length+o.ot_href+escape(o.ot_ref).length;
			ns=o.ot_ns(count-2000);
			document.write('<iframe style="position:absolute; visibility:hidden; width:1px; height:1px;" src="'+o.ot_dom+o.ot_path+qs+o.ot_href+'&ns='+ns+'&cb='+o.ot_rand+'"></iframe>');
		},
		ot_ns:function(diff){
			if(diff>0){
				var o=this,qo={},
					sp=/(?:^|&)([^&=]*)=?([^&]*)/g,
					fp=/^(http[s]?):\/\/?([^:\/\s]+)\/([\w\.]+[^#?\s]+)(.*)?/.exec(o.ot_ref),
					ro={h:fp[2],p:fp[3],qs:fp[4].replace(sp,function(p1,p2,p3){if(p2)qo[p2]=[p3]})};
				return escape(ro.h+ro.p.substring(0,10)+(qo.q?'?q='+unescape(qo.q):'?p='+unescape(qo.p)));
			}else{
				var o=this;
				return escape(unescape(o.ot_ref));
			}
		}
	}
	ft_onetag_5045.ot_init();
	*/
}


var textProp = document.documentElement.textContent !== undefined ? 'textContent' : 'innerText';

function getText( elem ) {
	return elem[ textProp ];
}

// When document is ready
$(function() {

	var cardsetSelector = '.cardset.'+ 'apps';
	var noResultsSelector = cardsetSelector + ' .no-filtered-results';

	// filter functions
	var filterFns = {
		// show as user enters value into field
		autocomplete: function() {
			var name = $(this).data('sort-value-2');
			var query = $('input[data-filter="autocomplete"]').val();
			var regexString = query;
			var regexp = RegExp(regexString, "i" );
			return name.match( regexp );
		}
	};

	// init Isotope
	$miniappIso = $(cardsetSelector + ' ul.cards').isotope({
		// options
		itemSelector: '.card',
		layoutMode: 'fitRows', /* masonry, fitRows */
		getSortData: {
			defaultSort1: '[data-sort-value-1]', // value of attribute
			defaultSort2: '[data-sort-value-2]', // value of attribute
			heading: function( itemElem ) { // function
				var heading = $( itemElem ).find('h3').text();
				return parseFloat( heading.replace( /[\(\)]/g, '') );
				}
		},
		sortBy : ['defaultSort1','defaultSort2'],
		sortAscending: false,
		filter: function() {
			var isMatched = true;
			var $this = $(this);

			for ( var prop in filters ) {
				var filter = filters[ prop ];
				// use function if it matches
				filter = filterFns[ filter ] || filter;
				// test each filter
				if ( filter ) {
					isMatched = isMatched && $(this).is( filter );
				}
				// break if not matched
				if ( !isMatched ) {
					break;
				}
			}
			return isMatched;
		}
	});


	// store filter for each group
	var filters = {};

	$(cardsetSelector + ' .filter-button-group').on( 'click keyup', '.btn', function() {
		var $this = $(this);
		// get group key
		var $buttonGroup = $this.parents('.button-group');
		var filterGroup = $buttonGroup.attr('data-filter-group');
		// set filter for group
		filters[ filterGroup ] = $this.attr('data-filter');
		// arrange, and use filter fn
		$miniappIso.isotope('arrange');
		// highlight button
		$(this).addClass('selected').siblings().removeClass('selected');

		/* display message box if no filtered items */
		if ( !$miniappIso.data('isotope').filteredItems.length ) {
			$(noResultsSelector).show();
		}
		else{
			$(noResultsSelector).hide();
		}
	});

	// layout Isotope after each image loads
	$miniappIso.imagesLoaded().progress( function() {
		$miniappIso.isotope('layout');
	});

	/* Tagging markup for GTM */
	$('.hero a').addClass('gtm-hero-a');
	$('.hp-tpl #customers a').addClass('gtm-hp-customers-a');

	/*DropDown with version list for Mobile and Server in Documentation Page*/
	$("#versionsDropDown").on("change", function(e) {
		window.location.href = $(this).val();
	});

	/*DropDown with programming languages in SDK page*/
	$("#languageDropDown").on("change", function(e) {
		var selectedOption = $(this).find("option:selected");
		if(!selectedOption.hasClass("notLanguageLink"))
		{
			setCookie('langCookie', selectedOption.text());
		}
		window.location.href = $(this).val();
	});

});

// Add wrapper to Marketo popup for improved vertical alignment
$('#download_form_container').closest('#shadowbox').addClass('download');
$('#shadowbox.download').wrap('<div class="shadowbox-download-wrapper"></div>');


/* COLLAPSIBLE MENU =================================================== */

$(function(){

  var headingClass = 'static';
  var linkClass = 'link';

  /* Assign classes to list items with children. Create links to expand/collapse. */
  $('.article-tpl .toc ul.collapsed li').parents('li').addClass('hasChild').prepend('<a href="#" class="icon"> </a>');

  /* Assign classes to links that are headings, not links (href="#") */
  $('.article-tpl .toc ul.collapsed a[href="#"]:not(.icon)').addClass(headingClass);

  /* Assign classes to links (href="#") */
  $('.article-tpl .toc ul.collapsed a[href!="#"]:not(.icon)').addClass(linkClass);

  /* Reveal article navigation to selected link */
  $('aside.left-rail a.selected').parents('li').addClass('open parent-of-selected');

  /* Hide content levels that were assigned a close class. */
  $('.article-tpl .toc ul.collapsed li.hasChild:not(.open, .parent-of-selected) > ul').hide().siblings('.icon').addClass('close');

  /* Show or hide children on icon click. */
  $('.article-tpl .toc ul.collapsed').on('click', 'a.icon', function( e ) {
    e.preventDefault();

    $(this).toggleClass('close').siblings('ul').slideToggle();
  });

  /* Change icon hover state when hovering over a heading. */
  $('.article-tpl .toc ul.collapsed a.static').hover(
    function() {
      $(this).prev('.icon').toggleClass('on');
    },
    function() {
      $(this).prev('.icon').toggleClass('on');
    }
  );

  /* Show or hide children on icon click. */
  $('.article-tpl .toc ul.collapsed').on('click', 'a.static', function( e ) {
    e.preventDefault();

    if($(this).attr("href") == "#"){
      //$(this).prev('.icon').click();
      $(this).prev('.icon').toggleClass('close').siblings('ul').slideToggle();
    }
  });

  $('aside.left-rail .toc').show();
});


/* HIPPO CHANNEL MANAGER =================================================== */
//
// If component properties change through the Channel Manager editor,
// call onload functions.
//

var hippoCmsFlag = false;
var localEnvironmentFlag = false;
var hippoCmsResourcePrefix = '';

(function detectHippoCMS(){
	// Top level window
	if(window.top == window.self) {
	  //console.log('Top level.');
	}
	// Not top level. An iframe, popup or something
	else {
		//console.log('Not top level.');

		if(window.parent.document.getElementById('Hippo.ChannelManager.TemplateComposer.Instance')){
		  //console.log('Channel manager detected.');

		  hippoCmsFlag = true;

		}
	}
}());

(function detectLocalEnvironment(){
	if(document.domain.indexOf('localhost') > -1) {
	  localEnvironmentFlag = true;
	}
}());

function hippoCmsChangeImagePaths(prefix){
	if(prefix !== ''){
		console.log('Changing CMS image path references...[hippoCmsChangeImagePaths]');

		// Add cms path to images referencing CMS images
	  	$('img[src^="/binaries/content/gallery"]').each(function () {
		  var curSrc = $(this).attr('src');

		  $(this).attr('src',prefix + curSrc);
		});
	}
}

/* " // Coda 2 sucks at color-coding properly after a regex.  Adding the " fixes the problem. */

/* AGENDA PAGE INFO TOGGLE =================================================== */
//
// Clicking 'session' name expands to show more information
//
var agendaToggle = function() {
    $('.agenda__entry').click(function(e){
        e.preventDefault();
        $(this).toggleClass('bold');
        $(this).next('div.agenda__addl-info').toggle();
    });
};
agendaToggle();

var $globalCurrentDay = '';
var agendaIdUpdate = function() {
    
    $('.agenda__tabs__unique, .agenda__table .columns').each(function(){
        var str = $(this).attr('id');
        if(str !== undefined) {
            str = str.replace(/\s+/g, "_");
            $(this).attr('id',str);
        }
    });

    $('.agenda__tabs__unique').click(function(){
        // Reset
        $('.session-group').css('display','none');
        $('.agenda__graphs').addClass('hide').removeClass('show');
        $('.agenda__filter').css('display','block');
        $('.agenda__table').removeClass('default');
        $('.agenda__tabs li').removeClass('active');
        
        // Switch to detail list
        $('#overview-list').css('display','none');
        $('#document-list').css('display','block');

        
        // Set
        $(this).parent('li').addClass('active');
        var tabId = $(this).attr('id');
        var subTabIdArray = tabId.split('tab_');
        var idSubString = subTabIdArray[1];
        console.log('idSubString from tab: ' + idSubString);
        // Find the .columns id that contains the tab idSubString and display
		$globalCurrentDay = idSubString;
        $('.columns').each(function(){
            var columnsId;
            if($(this).attr('id') !== undefined) {
        		columnsId = $(this).attr('id');

        	}
            else {
				columnsId = "";
            }
            if(columnsId.indexOf(idSubString) !== -1) {
                $(this).parent('.session-group').css('display','block');

                // Hide the filters/tracks if necessary
                if($(this).parent('.session-group').hasClass('hide-filters')){
                    $('.agenda__filter').css('display','none');
                }

            } 
        });
    });
    $('#tab_overview').click(function(){
        $('.agenda__filter').css('display','none');
        $('.agenda__table').addClass('default');
        $('.session-group').css('display','block');
        $('.agenda__graphs').addClass('show').removeClass('hide');
        $('.agenda__tabs li').removeClass('active');
        $(this).parent('li').addClass('active');
        
        // Switch to overview list
        $('#overview-list').css('display','block');
        $('#document-list').css('display','none');
		console.log('$globalCurrentDay OVER = ' + $globalCurrentDay);


    });
};
agendaIdUpdate();

$('.navi-icon').click( function() {
    if ($(this).hasClass('open')) {
        // if icon clicked has open, remove 'open' effectively closing modal
        $(this).removeClass('open');    
        $('.agenda__filter__box').css('display','none');
    }
    else {
        // then add open class to navi-icon;
        $(this).addClass('open');
        $('.agenda__filter__box').css('display','block');
    }
});

var filterTracks = function() {
    // Apply selected filter
    $('input[name=rdo-filter]:radio').click(function() {
        //console.log('filter clicked; ' + $(this).attr('id'));
        var radioId = $(this).attr('id');
        var trackValArray = radioId.split('rdo-');
        trackVal = trackValArray[1];
        //console.log('trackVal = ' + trackVal);
        
        if (trackVal === 'none') {
            $('.row').css('display','table-row');
            $('.agenda__table').removeClass('apply-filter');
			console.log("1");
		}
        else {
            var trackClassToShow = '.track-' + trackVal;
            $('.row').css('display','none');
            $(trackClassToShow).css('display','table-row');
            $('.agenda__table').addClass('apply-filter');
			//console.log("2");
			//console.log('$globalCurrentDay = ' + $globalCurrentDay);
			//console.log(".cont_" + $globalCurrentDay + " " + trackClassToShow);
			console.log($("#cont_" + $globalCurrentDay + " " + trackClassToShow).length.toString());
			if  ($("#cont_" + $globalCurrentDay + " " + trackClassToShow).length == 0) {
				//console.log("IF #no-session-" + $globalCurrentDay + " " + trackClassToShow);
				console.log("if no sessions");
				console.log('#no-session-' + $globalCurrentDay);

				//$('#overview-list #no-session-' + $globalCurrentDay).remove();
				$('#no-session-' + $globalCurrentDay).css('display','block');

			}
			else {
				console.log("else if sessions");
				console.log('#no-session-' + $globalCurrentDay);
				//console.log("ELSE #no-session-" + $globalCurrentDay + " " + trackClassToShow);

				$('#no-session-' + $globalCurrentDay).css('display','none');

			}



        } 
        $('.agenda__filter label').removeClass('rdo-selected');
        $(this).next('label').addClass('rdo-selected');






    });
    // Clear filters
    $('.agenda__tabs > li > a').click(function() {
        $('#rdo-none').click();
        //$('.row').css('display','table-row'); 
    });
    
};
filterTracks();

if(hippoCmsFlag){
	hippoCmsResourcePrefix = '/site/_cmsinternal';
}
else if(localEnvironmentFlag){
	hippoCmsResourcePrefix = '/site';
}

$(function(){
	hippoCmsChangeImagePaths(hippoCmsResourcePrefix);
});
